// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Event {
  id       String   @id @default(cuid())
  location String   @default("Carroll Gardens (Court Street & 2nd Pl, Brooklyn)")
  date     DateTime
}

model Invetory {
  id    String @id @default(cuid())
  items Item[]
}

model Item {
  id         String    @id @default(cuid())
  name       String    
  price      Price
  desc       String?
  images     String[]
  inventory  Invetory? @relation(fields: [invetoryId], references: [id])
  invetoryId String?
  category   Category
  private    Boolean   @default(false)
}

enum Price {
  LOW
  MEDIUM
  HIGH
}

enum Category {
  SHOES
  CLOTHES
  TCHOTCHKES
  GOODS
  MISC
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  admin         Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
